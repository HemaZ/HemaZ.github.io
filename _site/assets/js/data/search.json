[
  
  {
    "title": "Obj files symbols",
    "url": "/posts/linking/",
    "categories": "SW, Building",
    "tags": "building, nm, cpp, c",
    "date": "2023-12-13 11:55:01 +0000",
    





    
    "snippet": "Inspecting Obj files symbolsSymbol is one of the basic terms when talking about object files, linking, and so on. In fact, in C/C++ language, symbol is the corresponding entity of most user-defined...",
    "content": "Inspecting Obj files symbolsSymbol is one of the basic terms when talking about object files, linking, and so on. In fact, in C/C++ language, symbol is the corresponding entity of most user-defined variables, function names, mangled with namespace, class/struct/name, and so on. For example, a C/C++ compiler may generate symbols in an object file when people define non-static global variables or non-static functions, which are helpful for the linker to decide if different modules (object files, dynamic shared libraries, executables) would share the same data or code.nmWe can inspect the symbols in the object file using the nm command line tool.nm object_file.o | c++filt using nm with c++filt allows us to demangle C++ names.let’s take the following example c++ code// test.cppbool testFunc(){        return true;} // defined functionint declaredFunc(bool par); // declared but not definedstatic double staticVar = 0.5; // static global variableint main(){    int var = 15;    return declaredFunc(true);}We can compile this file as an object file without linking it (using the -c flag).g++ -c test.cpp -o test.oThen we can inspect the output object file using nm.nm test.o | c++filtwe should get something similar.000000000000000f T main                 U declaredFunc(bool)0000000000000000 T testFunc()0000000000000000 d staticVareach line representssymbol value    symbol type    symbol nameSymobl typesThe following diagram shows the memory layout of the object file.Object files are divided into sections, each serving a specific purpose. Common sections include:  Text Section: Contains the machine code (executable instructions) of the program  Data Section: Stores initialized global and static variables.  BSS Section: Reserved for uninitialized global and static variables. It doesn’t occupy space in the object file but is allocated when the program is loaded into memory.We will use this info to understand the symbol types below.T tThis symbol is in the object file’s .text code section.This is most of the time the case for any defined function in our code.example: main and testFunc in the code above.UThis symbol is undefined and no definition is found in the object file. This symbol could come from another library during linking. If it still couldn’t be found, the linker should throw an error.example: declaredFunc(bool) in the code above.D dThe symbol is in the initialized data section.example: staticVar in the code aboveReferences  Introduction to symbol visibility  Memory Layout of C Programs  nm(1) - Linux man page  What Happens After The Compiler in C++ (How Linking Works)"
  }
  
]

